return(boot_beta, se_beta_hat, lCI, uCI )
}
boot_t(data,1000, 500)
qnorm(alpha/2)
alpha = 0.05
qnorm(alpha/2)
qnorm(1-alpha/2)
wald_CI<-function(data, alpha=0.05){
model<-lm(y~x, data = data)
mean = summary(model)$coefficients[2,1]
sd = summary(model)$coefficients[2,1]
lCI = mean+qnorm(alpha/2)*sd
uCI = mean+qnorm(1-alpha/2)*sd
return(c(mean, sd, lCI, uCI))
}
wald_CI(data)
## Wald confidence
wald_CI<-function(data, alpha=0.05){
model<-lm(y~x, data = data)
mean = summary(model)$coefficients[2,1]
sd = summary(model)$coefficients[2,2]
lCI = mean+qnorm(alpha/2)*sd
uCI = mean+qnorm(1-alpha/2)*sd
return(c(mean, sd, lCI, uCI))
}
wald_CI(data)
boot_np<-function(data, B, alpha = 0.05){
boot_mean = rep(NA, B)
for (i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
}
return(c(mean(boot_mean), sd(boot_mean), quantile(boot_mean, probs = c(alpha/2,1-(alpha/2)))))
}
boot_np(data,100)
boot_np(data,1000)
boot_np(data,500)
## nonparametric t interval
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data[index,])
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
boot_t(data, 100,100)
boot_t(data, 1000,100)
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data[index,])
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[1] *se_beta_hat
uCI = beta_hat - t_quants[2] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
boot_t(data, 1000,100)
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data[index,])
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
boot_t(data, 1000,200)
## nonparametric t interval
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
boot_t(data, 1000,100)
## Wald confidence
wald_CI<-function(data, alpha=0.05){
model<-lm(y~x, data = data)
mean = summary(model)$coefficients[2,1]
sd = summary(model)$coefficients[2,2]
lCI = mean+qnorm(alpha/2)*sd
uCI = mean+qnorm(1-alpha/2)*sd
return(c(mean, sd, lCI, uCI))
}
## nonparametric percentile
boot_np<-function(data, B, alpha = 0.05){
boot_mean = rep(NA, B)
for (i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
}
return(c(mean(boot_mean), sd(boot_mean), quantile(boot_mean, probs = c(alpha/2,1-(alpha/2)))))
}
## nonparametric t interval
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
start_w <- Sys.time()
end_w <- Sys.time()
start_w-end_w
end_w-start_w
class(end_w-start_w)
results = as.list(rep(NA, nsim))
results = as.list(rep(NA, 100))
View(results)
## nonparametric t interval
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, quantile(boot_mean, probs = c(alpha/2,1-(alpha/2))), lCI, uCI))
}
nsim = 475
n = c(10, 50, 100)
beta_true = c(0, 0.5, 2)
eps_dist = c("normal", "log-normal")
params = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
eps_dist = eps_dist)
# define simulation scenario
scenario = 1
params = params[scenario,]
# load libraries
library(tidyverse)
get_simdata = function(n, beta_treat, eps_dist){
beta0 = 1
x = rbinom(n, 1, prob = 0.5)
if (eps_dist == "normal"){
epsilon = rnorm(n, 0, sd = sqrt(2))
}else if (eps_dist == "log-normal"){
epsilon = rlnorm(n, 0, sd = sqrt(log(2)))
}
y = beta0 + beta_treat * x + epsilon
tibble(
x = x,
y = y
)
}
dat<-get_simdata(n = params$n,
beta_treat = params$beta_true,
eps_dist = params$eps_dist)
boot_t(dat,1000,100)
lm(y~x, data = dat)
model0<-lm(y~x, data = data)
model0<-lm(y~x, data = dat)
summary(model0)$coefficients[2,1]
B=100
K=100
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = dat)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(dat)[1], dim(dat)[1], replace = TRUE)
model<-lm(y~x, data = dat[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(dat)[1], replace = TRUE)
model_k<-lm(y~x, data = dat[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
View(model_k)
index_k = sample(index,dim(dat)[1], replace = TRUE)
model_k<-lm(y~x, data = dat[index_k,])
View(model_k)
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(data)[1], replace = TRUE)
model_k<-lm(y~x, data = data[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, quantile(boot_mean, probs = c(alpha/2,1-(alpha/2))), lCI, uCI))
}
for(i in 1:B){
index <- sample(1:dim(dat)[1], dim(dat)[1], replace = TRUE)
model<-lm(y~x, data = dat[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
index_k = sample(index,dim(dat)[1], replace = TRUE)
model_k<-lm(y~x, data = dat[index_k,])
boot_mean_k[j]<-summary(model_k)$coefficients[2,1]
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
summary(model_k)
dat[index_k,]
index_k
is.na(summary(model_k)$coefficients[2,1])
is.na(summary(model_k)$coefficients)
dim(summary(model_k)$coefficients)
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
repeat {
index_k <- sample(index, dim(data)[1], replace = TRUE)
model_k <- lm(y ~ x, data = data[index_k,])
if (dim(summary(model_k)$coefficients)[1] > 1) {
boot_mean_k[j] <- summary(model_k)$coefficients[2,1]
break
}
}
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, quantile(boot_mean, probs = c(alpha/2,1-(alpha/2))), lCI, uCI))
}
boot_t(dat, 100,100)
warnings()
boot_CIs<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
repeat {
index_k <- sample(index, dim(data)[1], replace = TRUE)
model_k <- lm(y ~ x, data = data[index_k,])
if (dim(summary(model_k)$coefficients)[1] > 1) {
boot_mean_k[j] <- summary(model_k)$coefficients[2,1]
break
}
}
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, quantile(boot_mean, probs = c(alpha/2,1-(alpha/2))), lCI, uCI))
}
boot_t<-function(data, B, K, alpha = 0.05){
boot_mean = tstar = rep(NA, B)
model0<-lm(y~x, data = data)
beta_hat<-summary(model0)$coefficients[2,1]
for(i in 1:B){
index <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
model<-lm(y~x, data = data[index,])
boot_mean[i]<-summary(model)$coefficients[2,1]
boot_mean_k<-rep(NA, K)
for (j in 1:K){
repeat {
index_k <- sample(index, dim(data)[1], replace = TRUE)
model_k <- lm(y ~ x, data = data[index_k,])
if (dim(summary(model_k)$coefficients)[1] > 1) {
boot_mean_k[j] <- summary(model_k)$coefficients[2,1]
break
}
} ## need repeat because for small dataset, there's is probability of unable to fit lm
}
se_star<-sd(boot_mean_k)
tstar[i]<-(boot_mean[i]-beta_hat)/se_star
}
t_quants = quantile(tstar, probs = c(alpha/2, 1-(alpha/2)))
boot_beta = mean(boot_mean)
se_beta_hat = sd(boot_mean)
lCI = beta_hat - t_quants[2] *se_beta_hat
uCI = beta_hat - t_quants[1] *se_beta_hat
return(c(boot_beta, se_beta_hat, lCI, uCI))
}
boot_t(dat, 100,100)
vec <- c(1,3,2,4,1,5)
value <- 3
# Check if 3 is in the interval [x, x+2]
result <- sapply(vec, function(x) value >= x & value <= (x + 2))
result
start_t <- Sys.time()
end_t <- Sys.time()
as.numeric( end_t- start_t)
as.numeric( c(end_t- start_t, end_t- start_t))
library(tidyverse)
library(parallel)
###############################################################
## define or source functions used in code below
###############################################################
source(here::here("source", "01_simulate_data.R"))
source(here::here("source", "02_apply_methods.R"))
source(here::here("source", "03_extract_estimates.R"))
###############################################################
## set simulation design elements
###############################################################
nsim = 475
n = c(10, 50, 100)
beta_true = c(0, 0.5, 2)
eps_dist = c("normal", "log-normal")
params = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
eps_dist = eps_dist)
# define simulation scenario
scenario = 1
params = params[scenario,]
View(params)
params = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
eps_dist = eps_dist)
# define simulation scenario
scenario = 9
params = params[scenario,]
# generate a random seed for each simulated dataset
seed = floor(runif(nsim, 1, 10000))
results = as.list(rep(NA, nsim))
for(i in 1:nsim){
set.seed(seed[i])
####################
# simulate data
simdata = get_simdata(n = params$n,
beta_treat = params$beta_true,
eps_dist = params$eps_dist)
####################
# apply method(s)
start_w <- Sys.time()
wald_res <- wald_CI(simdata)
end_w <- Sys.time()
start_np <- Sys.time()
boot_np_res <- boot_np(simdata, 1000)
end_np <- Sys.time()
start_t <- Sys.time()
boot_t_res <- boot_t(simdata, 1000, 500)
end_t <- Sys.time()
####################
# calculate estimates & store results, including estimates, speed, parameter scenarios
results[[i]] = get_estimates(wald_res, boot_np_res, boot_t_res, params$beta_true, start_w, start_np, start_t, end_w, end_np, end_t)
}
View(results)
# generate a random seed for each simulated dataset
seed = floor(runif(nsim, 1, 10000))
results = as.list(rep(NA, nsim))
for(i in 1:nsim){
set.seed(seed[i])
####################
# simulate data
simdata = get_simdata(n = params$n,
beta_treat = params$beta_true,
eps_dist = params$eps_dist)
####################
# apply method(s)
start_w <- Sys.time()
wald_res <- wald_CI(simdata)
end_w <- Sys.time()
start_np <- Sys.time()
boot_np_res <- boot_np(simdata, 1000)
end_np <- Sys.time()
start_t <- Sys.time()
boot_t_res <- boot_t(simdata, 100, 50)
end_t <- Sys.time()
####################
# calculate estimates & store results, including estimates, speed, parameter scenarios
results[[i]] = get_estimates(wald_res, boot_np_res, boot_t_res, params$beta_true, start_w, start_np, start_t, end_w, end_np, end_t)
}
View(results)
filename = paste0("scenario_", scenario, ".RDA")
save(results,
file = here::here("results", filename))
save(results,
file = here::here("data", filename))
library(parallel)
library(doParallel)
install.packages("doParallel")
library(foreach)
detectCores()
library(doParallel)
